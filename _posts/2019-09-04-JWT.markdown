---
layout: post
title:  "【转】JWT（JSON Web Token）"
date:   2019-09-04 12:00:00 -0700
categories: Security
tags: Security JWT
description: 传统session认证，以及伴随无状态服务而来的JWT认证
---
### 摘抄自：
- [JSON Web Token 入门教程](https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html)

用户认证：
- 用户向服务器发送用户名和密码。
- 服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。
- 服务器向用户返回一个 session_id，写入用户的 Cookie。
- 用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。
- 服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。
- 扩展性不好：scaling。单机ok，但是如果是服务器集群 or 跨域的服务导向构架，要求session数据共享。eg. 2个网站，同一家公司，需要一个网站登录，另一个就自动登录。

解决方法：
1. session数据持久化：写入数据库或别的持久层。服务器收到请求后，都像持久层请求数据。架构清晰，但是持久层挂了就惨了。
2. 服务器不保存，所有数据都保存在客户端，每次请求都发回服务器。eg. JWT。

原理：服务器认证后，生成JSON对象，包括到期时间。每次C与S通信时，都要发回这个JSON对象。防止篡改，服务器会加上签名。 -> 无服务无状态了，容易实现扩展。

JWT数据结构：很长的字符串，中间用点（.）分隔成三个部分。
- Header（头部）·Payload（负载）·Signature（签名）
- Header：元数据
	- {  
	"alg": "HS256", // 签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）  
	"typ": "JWT" // 这个令牌（token）的类型（type），JWT 令牌统一写为JWT  
	}  
	- 最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。
- Payload：存放实际需要传递的数据。
	- 官方规定字段：
		- iss (issuer)：签发人
		- exp (expiration time)：过期时间
		- sub (subject)：主题
		- aud (audience)：受众
		- nbf (Not Before)：生效时间
		- iat (Issued At)：签发时间
		- jti (JWT ID)：编号
	- 也可以定义私有字段
	- 也用BaseURL转成字符串
！默认不加密，所以不要放秘密信息！

signature：
- 对前两部分的签名，防止数据篡改。
- 服务器才知道的密钥（secret），使用Header里面指定的签名算法（默认是HMAC SHA256）算出：
- HMACSHA256(  
  	base64UrlEncode(header) + "." +  
  	base64UrlEncode(payload),  
  	secret)

Base64URL算法：和Base64基本类似。JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 [api.example.com/?token=xxx](http://api.example.com/?token=xxx)）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。

JWT使用方式：
- 客户端收到服务器返回的JWT，可以储存在Cookie里面，也可以储存在localStorage。此后每次通信，都要带上这个。可以放在cookie里面自动发送，但是不能跨域。所以更好的做法：HTTP请求的头信息Authorization字段里面：
	- Authorization: Bearer <token>
- 或者，跨域的时候放在POST请求的数据体里

特点：
- JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。
- JWT 不加密的情况下，不能将秘密数据写入 JWT。
- JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。
- JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。
- JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。
- 为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。
\*JWT还是用在一些不那么需要保证安全的地方会好一些例如确认退订邮件等。