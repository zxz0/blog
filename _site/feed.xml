<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>zxz0</title>
		<description>Welcome to zxz0！</description>
		<link>http://localhost:4000/blog</link>
		<atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>VPS初始设置</title>
				<description>&lt;p&gt;因为打折，忍不住剁手 * 2。慢慢收拾残局。使用的CloudCone（KVM构架），操作系统CentOS 7.6（&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /etc/redhat-release 	# CentOS Linux release 7.6.1810 (Core)&lt;/code&gt;）。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;修改默认的SSH端口22
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; vim /etc/ssh/ssh_config 	&lt;span class=&quot;c&quot;&gt;# for ssh&lt;/span&gt;
 vim /etc/ssh/sshd_config	&lt;span class=&quot;c&quot;&gt;# for ssh daemon&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# uncomment # Port 22, change 22 to the port you want. better [49152, 65539]&lt;/span&gt;
 service sshd restart 		&lt;span class=&quot;c&quot;&gt;# restart sshd. now can only login thru the specified port&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;通过&lt;/p&gt;
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; port_you_specified username@ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;测试登陆。
如果系统开启了iptables防火墙，还需要设置允许指定的端口。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;创建普通用户，给予sudo权限：
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adduser username
passwd username
&lt;span class=&quot;c&quot;&gt;# need to repeat twice to verify&lt;/span&gt;
usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; wheel username 	&lt;span class=&quot;c&quot;&gt;# in CentOS, members of wheel group have sudo privileges&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or gpasswd -a username wheel&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# su - username to substitute user to check&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;通过切换到用户，sudo测试，如：&lt;/p&gt;
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; /root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;session第一次执行sudo需要输入当前用户（非root）密码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;限制普通用户的su切换
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; vim /etc/pam.d/su 	
 &lt;span class=&quot;c&quot;&gt;# uncomment: #auth required pam_wheel.so use_uid, so that only member in wheel group can execute su&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这样，不属于wheel组的成员账号切换（到root）时，系统会拒绝：即使输入了正确的root密码，也会提示密码不正确&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;禁止root远程SSH登陆
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /etc/ssh/sshd_config
&lt;span class=&quot;c&quot;&gt;# change PermitRootLogin yes -&amp;gt; PermitRootLogin no&lt;/span&gt;
service sshd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;不影响已连接的SSH。之后需要，可以普通用户远程登录，之后su切换到root；或者sudo执行需要root权限的命令。
往后，我们都使用新建的，有sudo权限的用户进行远程登录，以及各种常规操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;生成SSH Key pair，UI界面添加公钥到服务器（详见上文：&lt;a href=&quot;/blog/practice/2019/09/10/Gitlab-SSH-key.html&quot;&gt;GitLab设置SSH key，以及相关知识&lt;/a&gt;）
    &lt;ul&gt;
      &lt;li&gt;添加完毕后重新启动，还是不可以使用&lt;/li&gt;
      &lt;li&gt;按照页面上的指示，SSH去机器，运行指令：
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@173.82.151.128 	&lt;span class=&quot;c&quot;&gt;# connect via SSH. since we disabled root login, we need to login as normal user, then su root&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; cc-ikey &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; web.cloudc.one/sh/key &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh cc-ikey some_string 	&lt;span class=&quot;c&quot;&gt;# install the ssh key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;注意到在CloudCone即使有多个instance/vps，某个vps的UI界面也只有一个SSH Key。要继续添加，可以通过User / SSH Keys. \
仔细查看cc-ikey脚本，发现就是从cloudcone数据库用给定的id拿到UI界面中的public key，放到authorized_keys最后面；根据参数，确定是否关闭root远程登录。由于脚本必须要用root用户，所以无法配置别的用户的SSH key登录。此处使用直接copy到&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;的做法，手动添加SSH key到服务器。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;disable密码登录
    &lt;ul&gt;
      &lt;li&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;文件，加入/置&lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordAuthentication no&lt;/code&gt;，保存&lt;/li&gt;
      &lt;li&gt;重启ssh服务：
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service ssh restrat 	&lt;span class=&quot;c&quot;&gt;# Ubuntu or Debian&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service sshd restart 	&lt;span class=&quot;c&quot;&gt;# CentOS / Fedora&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用/开启防火墙：
CentOS有叫做firewalld的防火墙，工具firewall-cmd可以帮助设置防火墙。基本原则：关闭所有不必要的端口。
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# yum is package management tool. usage: yum install/remove/update/list/search/info/check-update [package_name]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start filewalld 	&lt;span class=&quot;c&quot;&gt;# firewalld can make modification without dropping current connections&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# start adjusting policies for the default zone. When we reload out firewall, this will be the zone applied to our interfaces. (NOT TRUE! current normal user connection will freeze and throw &quot;packet_write_wait: Connection to ip_address port ssh_port: Broken pipe&quot; somehow. I opened a root user session, not evicted somehow. maybe need to config this before change default ssh port? next time see if it crash when 2 normal user session are available)&lt;/span&gt;
systemctl status firewalld 	&lt;span class=&quot;c&quot;&gt;# see current firewall status&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ssh 	&lt;span class=&quot;c&quot;&gt;# add ssh service. --permanent will save the change to config file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;valid_port/tcp 	&lt;span class=&quot;c&quot;&gt;# if the default SSH port (22) changed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# can add other services here, eg. http, https (the corresponding default port will be automatically added)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--permanent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list-all&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# see config in file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--list-all&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# see current loaded config&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--reload&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# reload with new config file, apply the changes&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;firewall-cmd &lt;span class=&quot;nt&quot;&gt;--query-port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;61187/tcp 	&lt;span class=&quot;c&quot;&gt;# test the port is open&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;firewalld 	&lt;span class=&quot;c&quot;&gt;# start firewall at boot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置时间同步
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl list-timezones 	&lt;span class=&quot;c&quot;&gt;# to list all. space and b to page down/up, q to exit&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl set-timezone region/timezone 	&lt;span class=&quot;c&quot;&gt;# set the right one with server&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl 	&lt;span class=&quot;c&quot;&gt;# confirm the updated timezone&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ntp 	&lt;span class=&quot;c&quot;&gt;# Network Time Protocol (NTP) synchronization.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start ntpd 	&lt;span class=&quot;c&quot;&gt;# start service for current session&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;ntpd 	&lt;span class=&quot;c&quot;&gt;# start service at boot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;添加swap file：
当RAM不够的时候，Linux会把释放的空间临时保存到Swap空间中。虚拟内存。如果RAM不够大，或者不想应用crash，就用。尤其推荐db使用。
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;free &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# see how much we have for swap &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fallocate &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 4G /swapfile 	&lt;span class=&quot;c&quot;&gt;# can set 1:1 to RAM&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;600 /swapfile	&lt;span class=&quot;c&quot;&gt;# don't let other users to see the content&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkswap /swapfile 	&lt;span class=&quot;c&quot;&gt;# tell the system to format the file for swap&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;swapon /swapfile 	&lt;span class=&quot;c&quot;&gt;# tell the system it can use the swap file for current session&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;/swapfile none swap sw 0 0&quot; &amp;gt;&amp;gt; /etc/fstab'&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# modify the system file to do it automatically at boot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;hr /&gt;
    &lt;h4 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h4&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/MQqasjPs4Y-OCjQLuFj4ew&quot;&gt;手把手教你怎么使用云服务器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server&quot;&gt;How To Configure SSH Key-Based Authentication on a Linux Server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-instead&quot;&gt;Downloading Java JDK on Linux via wget is shown license page instead&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44213454/not-able-to-install-oracle-jdk-on-centos-machine-using-wget&quot;&gt;Not able to install oracle jdk on CentOS machine using wget&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/29079/how-do-i-provide-a-username-and-password-to-wget&quot;&gt;How do I provide a username and password to wget?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/luck_zz/article/details/80348592&quot;&gt;Linux下载及安装jdk1.8&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.linuxfromscratch.org/blfs/view/svn/postlfs/profile.html&quot;&gt;The Bash Shell Startup Files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10117943/what-is-the-good-way-of-setting-java-home-system-wide-in-linux-etc-profile-or&quot;&gt;What is the good way of setting JAVA_HOME system wide in Linux? /etc/profile or /etc/profile.d/custom.sh?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5ce67fa1f265da1b6a346d16&quot;&gt;Java开发环境不再需要配置classpath！&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/tianlesoftware/article/details/6201898&quot;&gt;Linux 修改SSH端口 和 禁止Root远程登陆&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.51cto.com/yttitan/1568305&quot;&gt;网络安全系列之十三 Linux中su与sudo的安全设置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart&quot;&gt;How To Create a Sudo User on CentOS [Quickstart]&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-centos-7&quot;&gt;Initial Server Setup with CentOS 7&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/additional-recommended-steps-for-new-centos-7-servers&quot;&gt;Additional Recommended Steps for New CentOS 7 Servers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tecmint.com/20-linux-yum-yellowdog-updater-modified-commands-for-package-mangement/&quot;&gt;20 Linux YUM (Yellowdog Updater, Modified) Commands for Package Management&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/&quot;&gt;怎样修改 CentOS 7 SSH 端口&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.liquidweb.com/kb/an-introduction-to-firewalld/&quot;&gt;An Introduction to Firewalld&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/kerrycode/p/5246383.html&quot;&gt;Swap交换分区概念&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/stulzq/p/9808504.html&quot;&gt;Centos7 防火墙 firewalld 实用操作&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sat, 14 Dec 2019 09:30:00 -0800</pubDate>
				<link>http://localhost:4000/blog/o&m/2019/12/14/VPS-initialization.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/o&m/2019/12/14/VPS-initialization.html</guid>
			</item>
		
			<item>
				<title>粗观Quartz调度框架</title>
				<description>&lt;p&gt;有段Quartz有关的代码需要维护，做了一点research&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JobDetail，是Job信息的抽象&lt;/li&gt;
  &lt;li&gt;Trigger，是触发器，很好理解&lt;/li&gt;
  &lt;li&gt;Job，则是具体的job，execute()之中的方法是干实事（business logic）的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个Job可以有很多trigger，一个trigger只能trigger一个job，这种松耦合，给予了scheduler很大的灵活性。&lt;/p&gt;

&lt;p&gt;具体机制：当事件被触发的时候，Job就会被instantiate，然后执行execute()方法。也就是说，Job是stateless的。这样就带来的一个问题，Job可能要用到的数据该存在哪里？别慌，有JobDataMap，在JobDetail里面。&lt;br /&gt;
Trigger也想传一些信息？Trigger也有JobDataMap。&lt;br /&gt;
这个Map，就是JDK的Map接口的一个实现。&lt;/p&gt;

&lt;p&gt;至于Job在execute里面如何access这些信息？execute方法，重载的execute方法有一个参数是context，里面可以拿到包括JobDetail，Trigger等等的一系列相关信息。&lt;/p&gt;

&lt;p&gt;scheduler本身，去scheduler job的时候，必须有JobDetail和Trigger。&lt;br /&gt;
定义JobDetail和Trigger的时候，要指定name和group，这个(name, group)的组合要是unique的。&lt;/p&gt;

&lt;p&gt;总之，因为是在一个application内的，所以如果有集群，要么就关掉其他的只剩下一个，要么就用消息中间件。&lt;/p&gt;
</description>
				<pubDate>Wed, 13 Nov 2019 12:00:00 -0800</pubDate>
				<link>http://localhost:4000/blog/framework/2019/11/13/quartz-framework.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/framework/2019/11/13/quartz-framework.html</guid>
			</item>
		
			<item>
				<title>焊接相关准备知识</title>
				<description>&lt;p&gt;有几个几年前的小电器，正好有时间就焊接了，全忘了，复习 + 记录一下&lt;/p&gt;

&lt;h3 id=&quot;焊接&quot;&gt;焊接：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;电烙铁预热到350度，可以融化焊锡，且不损伤元件&lt;/li&gt;
  &lt;li&gt;松香可以座位助焊剂：减少虚焊，防腐蚀&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;电阻带色环的非贴片电阻&quot;&gt;电阻：带色环的（非贴片电阻）&lt;/h3&gt;
&lt;p&gt;一二（三）环（是否有第三环看总共多少）：直接拼接，主要数据&lt;br /&gt;
棕一红二橙三黄四绿五
蓝六紫七灰八白九黑零&lt;/p&gt;

&lt;p&gt;下一环：乘数&lt;br /&gt;
黑 -&amp;gt; 紫：10^0, 10^1, …（或者直接记忆：1后0的个数）；
金：10^(-1), 0.1；
银：10^(-2), 0.01&lt;/p&gt;

&lt;p&gt;隔远的最后一环：误差&lt;br /&gt;
金：5%；
银：10%
（也可以用这两个颜色确定方向）&lt;/p&gt;

&lt;h3 id=&quot;电解电容圆柱体黑色&quot;&gt;电解电容：圆柱体，黑色&lt;/h3&gt;
&lt;p&gt;正级是长方形那边（电路图），长引脚/有正极标示的那边（实物）&lt;br /&gt;
负极是有阴影那边（PCB装配图），则是有负极套管标志/有压花的那边&lt;/p&gt;

&lt;h3 id=&quot;瓷片电容瓷介电容扁的圆的一般红色蓝色注意与热敏电阻黑区分&quot;&gt;瓷片电容/瓷介电容：扁的，圆的，一般红色/蓝色，注意与热敏电阻（黑）区分&lt;/h3&gt;

&lt;h3 id=&quot;发光二极管&quot;&gt;发光二极管：&lt;/h3&gt;
&lt;p&gt;正极是三角形那边（电路图。想象三角指向电流方向），长引脚/管体内部金属级较小的一边（实物）&lt;/p&gt;

&lt;h3 id=&quot;二极管&quot;&gt;二极管：&lt;/h3&gt;
&lt;p&gt;负极是有一圈粗环标志的那一级（实物）&lt;/p&gt;

&lt;h3 id=&quot;按键开关&quot;&gt;按键开关：&lt;/h3&gt;
&lt;p&gt;一般焊对角线，具体可以用万用表测量哪两个角在按下的时候导通，松开的时候电阻无穷大&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/ceb9fb10ef5df28cad2ba0a0.html&quot;&gt;如何辨别二极管的正负极&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 01 Nov 2019 03:49:00 -0700</pubDate>
				<link>http://localhost:4000/blog/hardware/2019/11/01/welding-related.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/hardware/2019/11/01/welding-related.html</guid>
			</item>
		
			<item>
				<title>家庭组网相关知识</title>
				<description>&lt;h3 id=&quot;已有知识&quot;&gt;已有知识：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;学过计算机网络，死记硬背，基本忘光&lt;/li&gt;
  &lt;li&gt;在直接连接ISP的路由器下设置过服务器，知道内网ip绑定，端口转发（外 -&amp;gt; 内），防火墙等等&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;行文&quot;&gt;行文：&lt;/h3&gt;
&lt;p&gt;因为观察零碎，知识点散乱，所以暂且从目的开始整理思路，把已知的（观察到的）都列举出来。中途遇到不懂的就查资料，一并付在文中。没耐心可以直接跳到文末看知识点总结和解决方案。&lt;/p&gt;

&lt;h3 id=&quot;目的&quot;&gt;目的：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;扩展Wi-Fi信号&lt;/li&gt;
  &lt;li&gt;安全地增加内网专用服务器，使其可以使用域名access&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;视觉观察&quot;&gt;视觉观察：&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;弱电箱内网线绞在一起，不敢轻举妄动，所以没法看出这块的结构。没有猫。看不到网线是怎么连的。&lt;/li&gt;
  &lt;li&gt;有2个路由器（家庭路由器）。&lt;/li&gt;
  &lt;li&gt;路由器1，WAN口和LAN口网线从水晶头连出后绞在了一起（一个水晶头是4条线，绿绿橙白，还有一个看不清，但是有蓝灰），末端是一个水晶头，连到墙上的唯一网口，没有其他的线/口连接（没看里面具体是什么线连什么）。&lt;/li&gt;
  &lt;li&gt;网络电视的机顶盒连接墙上网口。&lt;/li&gt;
  &lt;li&gt;路由器2，WAN口连接墙上的网口，LAN口连接台式电脑。&lt;/li&gt;
  &lt;li&gt;有2个Wi-Fi，分别在路由器1附近和路由器2附近信号强。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-&amp;gt; 目的 += 如果可能，只保留一个Wi-Fi，免得手动切换&lt;/p&gt;

&lt;h3 id=&quot;路由器设置&quot;&gt;路由器设置：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;路由器1
    &lt;ol&gt;
      &lt;li&gt;WAN口：
        &lt;ul&gt;
          &lt;li&gt;WAN口连接类型：宽带拨号上网（PPPoE：运营商分配宽带用户名和密码，通过用户名和密码进行用户身份认证）&lt;/li&gt;
          &lt;li&gt;账号密码信息：有valid值&lt;/li&gt;
          &lt;li&gt;拨号模式：自动选择拨号模式&lt;/li&gt;
          &lt;li&gt;WAN口速率设置：自动协商（有其他选项：100M半双工，100M全双工等等）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;LAN口：
        &lt;ul&gt;
          &lt;li&gt;LAN口IP设置：自动
            &lt;ul&gt;
              &lt;li&gt;LAN-WAN级联或WDS无线桥接时，建议保持为自动；LAN-LAN级联时，建议选择为手动，修改ip地址和主路由器在同一网段且不冲突。eg. 主：192.168.1.1，副：192.168.1.X，x=[2, 254]。
                &lt;ul&gt;
                  &lt;li&gt;LAN-WAN级联：从主路由器分出来的网线连接到路由器的WAN口，电脑通过有线连接，只需要把网线连接到任意空闲的LAN口即可上网。
                    &lt;ul&gt;
                      &lt;li&gt;主、副路由器下的终端处于不同的局域网，无法互访&lt;/li&gt;
                      &lt;li&gt;主、副路由器的无线名称和密码设置相同时，也不能实现无线漫游，主路由器无法实现对副路由器的终端设置带宽控制、上网控制等功能&lt;/li&gt;
                      &lt;li&gt;路由器一般都有LAN-WAN冲突检测的功能&lt;/li&gt;
                      &lt;li&gt;使用环境推荐：对于网络结构复杂、终端数量较多的环境（例如酒店、旅馆等环境）建议使用LAN-WAN级联，将大的局域网分割为小的局域网，可以有效防止广播风暴、ARP攻击等&lt;/li&gt;
                      &lt;li&gt;具体设置：两个子网用路由器级联：路由器A的WAN口接外网，路由器A的子网为192.168. 1.0，路由器A的地址为192.168.1.1，路由器B的WAN端口接路由器A的一个lan端口。路由器B的地址设为192.168.X.1（X为除去1之外的任何数），那么路由器B所连的字段为192.168.X.0，然后在路由器A的静态路由表中设置将发往192.168.X.0的数据网交由网关192.168.1.1转发。这样，两个子网可以共享外网。&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;LAN-LAN级联：
                    &lt;ul&gt;
                      &lt;li&gt;此时第二个路由器相当于交换机，所有终端都处于同一个局域网中，可以实现互访&lt;/li&gt;
                      &lt;li&gt;当主、副路由器设置相同的无线名称和密码时，可以实现无线漫游&lt;/li&gt;
                      &lt;li&gt;主路由器可以对副路由器下连接的终端实现带宽控制等网络权限限制&lt;/li&gt;
                      &lt;li&gt;使用环境推荐：对于网络结构简单，终端数量较小的环境（例如小型办公环境、普通家用环境）建议使用LAN-LAN级联&lt;/li&gt;
                      &lt;li&gt;具体设置：两个路由器同处于一个子网：路由器A接外网，路由器B的其中一个LAN口连接路由器A的一个LAN口，此时路由器B仅当做交换机的功能，也就是只实现了数据链路层的交换，屏蔽了网络层的功能。连接路由器B的其余的LAN口的PC需要手动设置IP（为什么？？），所设的IP和路由器A的IP处于同一子网就可以了。同样可以共享外网，并且处于同一局域网。&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;WDS桥接：WDS（Wireless Distribution System）桥接功能可以将无线路由器通过无线方式连接到已有信号。
                    &lt;ul&gt;
                      &lt;li&gt;多台路由器都在同一局域网，电脑连接任何路由器的LAN口都可以上网，无线终端连接信号后可以漫游，达到信号增强的目的。&lt;/li&gt;
                      &lt;li&gt;星形拓扑：A - B; A - C; A - D; …&lt;/li&gt;
                      &lt;li&gt;直线性拓扑：A - B - C…建议不超过三级（三级以上，不能保证网络的稳定性和无线速率）&lt;/li&gt;
                      &lt;li&gt;WDS桥接也可以组成树形扩展网络，具体的网络扩展方式根据实际需求选择。简单讲，WDS桥接的环境中，无线路由器可以理解为交换机，所有路由器间通过无线进行连接，无需连接网线。&lt;/li&gt;
                      &lt;li&gt;避免环路：设置主、副路由器进行WDS桥接前，请勿使用网线连接两个路由器，避免形成环路（会导致广播风暴）。如果为主、副路由器均为双频路由器，5GHz和2.4GHz不能同时进行WDS桥接。&lt;/li&gt;
                      &lt;li&gt;副路由器网络参数：
                        &lt;ul&gt;
                          &lt;li&gt;DHCP服务器：需要按指导流程关闭副路由器的DHCP服务器（结合实际需求），避免DHCP服务器冲突。如有多台副路由器，仅保留一个DHCP服务器。&lt;/li&gt;
                          &lt;li&gt;管理IP地址：设置WDS桥接完成后，请确保副路由器的IP地址与主路由器不冲突。为了便于管理，建议将副路由器的管理地址设置为与主路由器（连接宽带的路由器）同一网段。eg. 192.168.1.1, 192.168.1.2, 192.168.1.3…&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;WDS桥接设置中，将副路由器的无线SSID、密码设置为与主路由器相同，则可以实现移动过程中自动漫游。&lt;/li&gt;
                      &lt;li&gt;WDS桥接的漫游网络中，正常情况下只能搜到一个（信号最强），也可能有极少数终端会搜到多个相同名字的信号。移动过程中会实现自动切换（切换机制取决于无线终端），无需手动操作。&lt;/li&gt;
                      &lt;li&gt;主副路由器中，只要有一个支持WDS桥接功能即可，支持WDS桥接功能的路由器作为副路由器，扫描桥接另一个路由器即可。主、副路由器可以为不同品牌、不同型号的路由器。&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;无线路由器配置的wifi则相当于LAN端口&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;IP地址：192.168.0.1
            &lt;ul&gt;
              &lt;li&gt;在WDS无线桥接或LAN-LAN级联时，需要修改LAN口IP地址和主路由器同一网段且不冲突的IP地址。例如：主路由器的LAN口IP地址为192.168.1.1，副路由器的LAN口IP地址修改为192.168.1.X（X=2-254）。&lt;/li&gt;
              &lt;li&gt;在LAN-WAN级联组网方式时，需要修改LAN口IP地址和主路由器不同网段的IP地址，例如：主路由器的LAN口IP地址为192.168.1.1，副路由器的LAN口IP地址修改为192.168.X.1。&lt;/li&gt;
              &lt;li&gt;IP地址不能与上级网络处于同一网段中（路由器的IP地址和LAN口的IP地址段不能相同，即前三段不能完全相同）&lt;/li&gt;
              &lt;li&gt;同一网段的可以直连&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;子网掩码：225.225.225.0&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DHCP服务器：
        &lt;ul&gt;
          &lt;li&gt;地址池开始地址：192.168.0.100&lt;/li&gt;
          &lt;li&gt;地址池结束地址：192.168.0.199&lt;/li&gt;
          &lt;li&gt;网关：0.0.0.0
            &lt;ul&gt;
              &lt;li&gt;路由器的IP地址和默认网关必须在同一地址段内&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;首选DNS服务器：0.0.0.0&lt;/li&gt;
          &lt;li&gt;备选DNS服务器：0.0.0.0&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;UPnP设置：&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;应用描述&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;外部端口&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;协议类型&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;内部端口&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;IP地址&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;状态&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;yfnet&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;20118&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;UDP&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;20118&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;192.168.0.118&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;启用&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;yfnet&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;20118&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;TCP&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;20118&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;192.168.0.118&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;启用&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;路由功能：&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;目的网络地址&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;子网掩码&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;下一跳地址&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;接口&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;192.168.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;255.255.255.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;LAN/WLAN&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;(运营商网关？此处省略)&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;255.255.255.255&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;WAN&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;(运营商网关？此处省略)&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;WAN&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;

        &lt;ul&gt;
          &lt;li&gt;0.0.0.0表示默认缺省路由，即当前路由表中没有找到完全匹配的路由的时候所对应的路由&lt;/li&gt;
          &lt;li&gt;在路由表中查找”对应”表项是通过把路由表表项的IP地址的子网掩码与目的地址的子网掩码进行比较来实现的.所以,只要把”默认路由”的子网掩码设为0(在路由表中即系0.0.0.0/0这一项),则”默认路由”一定可以目的地址”对应”.&lt;/li&gt;
          &lt;li&gt;网关0.0.0.0表示不需要经过网关（？）&lt;/li&gt;
          &lt;li&gt;看到后面发现，“运营商网关”也是个内网地址（100.65.xxx.xxx），但不是一个网段的（后文有厘清这两个概念）。&lt;/li&gt;
          &lt;li&gt;但是还是不明白为什么要下一跳0.0.0.0？？不可以直接省略嘛？&lt;/li&gt;
          &lt;li&gt;为什么会是255.255.255.255？
            &lt;ul&gt;
              &lt;li&gt;终端通过PPPOE或是PPP播号上网时，PPP（PPPOE）是二层协议，驱动会记住分配下来的IP地址与PPP SERVER端地址与MAC（或是这个地址自己设定），收报文肯定是没有问题的，发送报文时，终端协议栈通过直连路由或是默认路由，甚至在子网掩码为全 f 的情况下，下一跳是它自己，这个报文就可以往外发，当驱动层（准确说应该是链路层）收到这个报文时，一检测是哪个IP的，直接就发到记下的PPP SERVER 的 MAC。简单的说，PPPOE拨号以后，PC就像一个环回口一样，既然路由器的环回口可以配置掩码255.255.255.255，那么，PC也能获取一样的掩码。&lt;/li&gt;
              &lt;li&gt;WAN口使用255.255.255.255 网络掩码不会浪费IPv4地址资源。
                &lt;ul&gt;
                  &lt;li&gt;无线路由器WAN拨号，由 PPPoE server ，准确地说PPP server 来负责双向路由的通达，用户首先通过PPPoE 广播找到 PPPoE server，及其MAC地址，然后 PPPoE 封装PPP，到达PPP server , 分配 x.x.x.x/32 主机路由给用户WAN口，同时动态生成一条host route，like x.x.x.x/32  next-hop VAx ，VA 是 virtual access 的缩写，是一个软件接口，通过这个软件接口可以到达 x.x.x.x/32，是下行路由通达。&lt;/li&gt;
                  &lt;li&gt;同理在客户端WAN口绑定分配的IP x.x.x.x/32，也会产生一条缺省路由，like 0.0.0.0 0.0.0.0  next-hop WAN，只要不是本地的流量，都扔到WAN口就可以到达PPPoE server，PPPoE destination MAC 填写 PPPoE server MAC 即可，然后到达 PPP server，然后通过 Internet gateway 到达 Internet，此举可以保证上行路由可达。&lt;/li&gt;
                  &lt;li&gt;PPP点对点&lt;/li&gt;
                  &lt;li&gt;普通客户往往并不需要子网广播业务，于是部分ISP采用这种掩码把x.x.x.255等地址分配出去。&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Wi-Fi：
 开启，2.5G和5G 2个信道，SSID一样&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;路由器2:
    &lt;ol&gt;
      &lt;li&gt;WAN口：
        &lt;ul&gt;
          &lt;li&gt;WAN口连接类型：自动获得IP地址&lt;/li&gt;
          &lt;li&gt;IP地址：192.168.0.106&lt;/li&gt;
          &lt;li&gt;子网掩码：255.255.255.0&lt;/li&gt;
          &lt;li&gt;网关：192.168.0.1
            &lt;ul&gt;
              &lt;li&gt;上一级路由器的LAN口地址&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;DNS服务器：192.168.0.1，0.0.0.0&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;LAN口：
        &lt;ul&gt;
          &lt;li&gt;IP设置：自动（推荐）&lt;/li&gt;
          &lt;li&gt;IP地址：192.168.1.1&lt;/li&gt;
          &lt;li&gt;子网掩码：255.255.255.0&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DHCP服务器：
        &lt;ul&gt;
          &lt;li&gt;地址池开始地址：192.168.1.100&lt;/li&gt;
          &lt;li&gt;地址池结束地址：192.168.1.199&lt;/li&gt;
          &lt;li&gt;网关：0.0.0.0&lt;/li&gt;
          &lt;li&gt;首选DNS服务器：0.0.0.0&lt;/li&gt;
          &lt;li&gt;备选DNS服务器：0.0.0.0&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;系统路由表：&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;目的网络地址&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;子网掩码&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;下一跳地址&lt;/th&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;接口&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;192.168.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;255.255.255.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;LAN/WLAN&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;(运营商网关？此处省略)&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;255.255.255.255&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;WAN&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;0.0.0.0&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;(运营商网关？此处省略)&lt;/td&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;WAN&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;

        &lt;ul&gt;
          &lt;li&gt;在宽带路由器中存在一条默认路由，它的作用是将局域网内主机发往外网的信息包到达LAN口网关后，将信息包转发到WAN口的网关，以此实现内网主机共享网络的需要。&lt;/li&gt;
          &lt;li&gt;下面设备访问时，会把目标IP包发到LAN口，路由器接受后检查，如果属于本网段，则直接转发到对应主机；不是就转发给WAN口。&lt;/li&gt;
          &lt;li&gt;WAN口确认不属于本网段后，转发给上级路由器（Gateway），此处的0.0.0.0的下一跳地址&lt;/li&gt;
          &lt;li&gt;为何到192.168.0网段不需要经过网关？&lt;/li&gt;
          &lt;li&gt;Gateway 0.0.0.0 不需要经过网关&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Wi-Fi：
 开启，2.5G和5G 2个信道，SSID一样&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 总之，就是加了个副路由器，副路由器自己分配子网ip（实际上是同层），并且很巧妙地避开同样的ip，避免ip冲突&lt;/p&gt;

&lt;h3 id=&quot;终端设置&quot;&gt;终端设置：&lt;/h3&gt;
&lt;p&gt;台式电脑连接路由器2的LAN口可以上网。&lt;br /&gt;
连接墙上网口可以直接上网（查看ip，发现是路由器2分配的）。&lt;br /&gt;
连接两个Wi-Fi均可以直接上网。&lt;/p&gt;

&lt;h3 id=&quot;询问网络业者得到结构相关的解释&quot;&gt;询问网络业者，得到结构相关的解释：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;路由器之间是级联！路由器1是主路由器！路由器2是副路由器&lt;/li&gt;
  &lt;li&gt;因为路由器出厂的IP地址是一样的！所以修改一个路由器的LAN口地址即可实现级联&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 路由器LAN口地址，就是子网内access路由器的地址，这里为了防止ip冲突，要设置成不一样的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;（对于扩展信号）无线桥接是可以的！但信号有衰减！（取决于设备本身）！&lt;/li&gt;
  &lt;li&gt;主路由器到副路由器之间可以用有线！就是级联！也可以采用无线桥接！&lt;/li&gt;
  &lt;li&gt;主路由器WAN口接光猫！然后主路由器的lan口接副路由器的WAN口和LAN口都可以
    &lt;ul&gt;
      &lt;li&gt;接副路由器的WAN口就是副路由器作为一个单独路由器！自身可以分配连上的终端IP地址！&lt;/li&gt;
      &lt;li&gt;接副路由器的LAN口就是要靠主路由器分配IP地址！本身只做信号透传！&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 如果全接LAN口就是把路由器当作交换机使用（但是需要关闭副路由器的DHCP服务器以避免同一网络下有多个DHCP服务器，并且修改LAN口地址避免ip冲突：改为局域网段内ip，但是要避开主路由的LAN口IP，和一些可能分配到的ip，比如设置成192.168.0.254。但是Wi-Fi呢？还是会有2个Wi-Fi，但是处于一个子网下，均由主路由器分配子网ip？？可以设置成同样的SSID，这样用户就不需要额外手动切换了。channel可以用auto，或者如果知道的话，可以指定）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我们一般做的最多的方式就是2个设备独立使用！但采用级联方式！这样就可以避免内网地址重复或者地址冲突&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 就是副路由器不做AP，也路由的情况。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你要内网建立服务器！必须在路由器内部添加路由条目！因为默认不在一个网段是不能互相访问的！做了路由才可以比如192.168.1.2 和192.168.1.3这就是一个网段，这样默认可以互相访问；如果192.168.1.2 和192.168.2.2这就不是一个网段！要互访需要添加路由&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 255.255.255.0，转换成二进制和IP AND，分别得到网络标识：192.168.1.0，192.168.2.0，不同。顺便：主机标识是子网掩码取饭AND IP，分别得到：0.0.0.2和0.0.0.2。大意就是ip地址和子网掩码，可以得到网段和主机两个信息。同一网段内可以直接access，不用NAT通信。总之，要添加路由才能访问不同网段。关于内网（之前一直没弄清，和网段相混淆的概念），参考资料：“在互联网的世界里面，为了规避这种情况，就预留了几个网段做为约定的私网网段，比如我们常见的10/8，172.16/12，192.168/16。也就是说，只要你的IP是这几个网段的，大家就都知道 你肯定是在内网，而不会去公网寻找你的地址。必须背一个网关隔离在私有域内。所有使用这些地址的终端，要和网关外的主机通信，必须用NAT，PROXY或者隧道技术进行地址转换，以使得对方回复过来的数据包可以在Internet上转发”。有notation: \24，代表前24位（二进制的）是网络号，后8位是主机号。子网掩码是网络号全1，主机号全0，用以AND获取网络号（网段）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这个是因为主线进来的位置可能在客厅！然后有一根线到书房！但路由器需要放在书房！所以一根网线分了2组！4芯一组！一组连接光猫！一组返回到其他需要上网的设备上了！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 也就是说，因为线已经在墙里面了，所以不好动，只能这样接2根线&lt;/p&gt;

&lt;p&gt;懵懵懂懂，没有彻底弄清楚。对于自己的问题，一个个解决：&lt;/p&gt;

&lt;h3 id=&quot;主路由器wan口和lan口连接在一起是怎么回事&quot;&gt;主路由器wan口和lan口连接在一起，是怎么回事？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;家中的网线一般是8芯的，100Mbps的连接方式使用了4芯，1000Mbps接法使用了8芯网线；百兆网络只需要1,2,3,6四芯即可，两芯发送数据，两芯接收数据，其余的四芯可以用于连接另一个网络。&lt;/li&gt;
  &lt;li&gt;其它LAN口下面的设备即能通过路由上网,也能直通猫&lt;/li&gt;
  &lt;li&gt;电脑接LAN口,能直接上网,电脑又能PPPOE拔号,而不需要去重新接线&lt;/li&gt;
  &lt;li&gt;这样的接法前提是你小区机箱的交换机做好了端口隔离。否则，你就相当于跟整个居民楼共享了你家的网，安全和网速都有大问题。&lt;/li&gt;
  &lt;li&gt;将WAN口和LAN口相连，剩余的LAN口和无线之间的关系就会非常有意思，他们既是LAN-WAN的关系（路由/内网外网），也是LAN-LAN的关系（交换/局域网）。&lt;/li&gt;
  &lt;li&gt;这个是因为主线进来的位置可能在A（别的地方）！然后有一根线到B（现在的地方）！但路由器需要放在B！所以一根网线分了2组！4芯一组！一组连接光猫！一组返回到其他需要上网的设备上了！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;所以wan口和lan口到底有什么区别&quot;&gt;所以WAN口和LAN口到底有什么区别？&lt;/h3&gt;
&lt;p&gt;就是……理解成不同的接口？路由器可以把外界的网路和内网连接（并且DHCP服务器给内网分配IP）。外界网路连接WAN，内网连接LAN，路由器充当中间层。主要目的是节约有限的ip资源（内网ip可以复用）。更底层一点的逻辑：VLANs (Virtual Lan)可以把物理网络分成不同的logical segments as if they are actually seperate independent networks. 必要的时候，路由器可以路由，并且把这些VLANs连接在一起。设置的时候会发现有多余的port，是internal port，不连接外界；在配置文件中必须要卸载每个VLan中；*表示默认VLAN，必须要是LAN VLAN。&lt;/p&gt;

&lt;h3 id=&quot;家里网络究竟是什么结构&quot;&gt;家里网络究竟是什么结构？&lt;/h3&gt;
&lt;p&gt;外网，猫？
主路由，一个Wi-Fi是由这个路由管理的；副路由接在主路由下，由主路由分配ip（并没有绑定）。&lt;br /&gt;
尝试：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;使用LLTD链路层发现协议查看网络拓扑图：
  并没有得到什么有益的信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wds中继repeater桥接bridge以及相关&quot;&gt;WDS中继(Repeater)，桥接（Bridge），以及相关&lt;/h3&gt;
&lt;p&gt;有两种意见：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;桥接不做第二次的DHCP，在同一个网段
    &lt;ul&gt;
      &lt;li&gt;WDS桥接是一种特殊的桥接方式，必须修改主路由器的配置，让其工作在 AP+WDS 模式下，副路由器才能使用 WDS 与之相连，同时副路由器也能作为 AP。同样可以将主路由器和副路由器置于同一 IP 网段，确切说它们位于同一冲突域。&lt;/li&gt;
      &lt;li&gt;桥接：bridge。就是不新分配子网，用主路由器的DHCP功能。“多数是指在两个网络在数据链路层面被连接起来，都处在同一个IP局域网内。”&lt;/li&gt;
      &lt;li&gt;是否桥接，取决于方便性，以及安全性需求（桥接，则在一个网段，都可以互相访问）&lt;/li&gt;
      &lt;li&gt;Client, Repeater使得副路由器工作在第三层，而Client Bridge, WDS, Repeater Bridge使副路由器工作在第二层&lt;/li&gt;
      &lt;li&gt;路由器本身是一个三层设备，如果让它工作在二层的话，它的三层能力就全部失效，无法路由，无法NAT，也无法提供流量管理等等。所以在配置无线路由器的时候，明确一下工作在那一层还是很有必要的。&lt;/li&gt;
      &lt;li&gt;“层”的概念：桥接则是：各接入点处于同一层——不同（二层）物理网段下的相同（三层）逻辑网络。&lt;/li&gt;
      &lt;li&gt;没有IP的时候，许多交换机可以划分vlan。一个vlan内部可以互相通讯，不同vlan没法儿通讯。&lt;/li&gt;
      &lt;li&gt;不同vlan之间通讯，叫做bridge。&lt;/li&gt;
      &lt;li&gt;wisp就是以无线的方式一级路由接二级的wan口，二级路由再做一次nat，一级路由里只看得到二级路由的mac，这种方式比无线桥接更隐蔽。无线桥接就是以无线的方式上级路由的lan接二级的lan,这种方式二级路由相当于无线交换机，这种方式连在二级路由的设备一级路由都看得到，不够隐蔽而且二级路由的nat功能都没法用，qos npnp,ss,adbyby等等。&lt;/li&gt;
      &lt;li&gt;关键：关系处于哪一层（2/3）——是否有NAT，谁负责IP分配，是否彼此可见，有线/无线方式。
        &lt;ol&gt;
          &lt;li&gt;设备关系在网络模型的哪一层（2层或3层），即，交换或路由。涉及：是否有NAT，(W)WAN/(W)LAN或(W)LAN1+(W) LAN2，谁负责IP分配DHCP，终端（相交于设备，或称为客户端/主机）是否彼此可见等；&lt;/li&gt;
          &lt;li&gt;是否作为客户端（Client）与/或作为无线接入点（AP）/有线接口。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;中继只是简单传递信号，所以在同一个网段？
    &lt;ul&gt;
      &lt;li&gt;“中继器”这个概念为物理层设备（对物理层的比特流进行单纯转发），至于最近几年通过各种方式在数据链路层实现类似于中继这种功能，那是各个厂商的事&lt;/li&gt;
      &lt;li&gt;中继器，是repeater的意译，直译就是重复器。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以？？不纠结名词了，就看怎么接的吧……&lt;/p&gt;

&lt;h3 id=&quot;透穿&quot;&gt;透穿&lt;/h3&gt;
&lt;p&gt;指与传输网络的介质、调制解调方式、传输方式、传输协议无关的一种数据传送方式。&lt;br /&gt;
这就好比快递邮件，邮件中间有可能通过自行车、汽车、火车、飞机的多种组合运输方式到达您的手上，但您不用关心它们中间经历了哪些。&lt;/p&gt;

&lt;p&gt;为什么要透传呢？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;透传一般都是用来读取远程的串口数据
    &lt;ul&gt;
      &lt;li&gt;例如：网吧内每个上网者都要刷身份证才能上网，但身份证数据库不可能放在每个网吧内。所以就将读卡器的串口数据通过透传回传到公安局，在公安局的平台上来比对身份证号码。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt; 大概就是通过接口调用别人服务的感觉，别人的服务对于调用者透明，所以是“穿透”&lt;/p&gt;

&lt;h3 id=&quot;发现24g和5g的ssid一样是否会有什么影响&quot;&gt;发现2.4G和5G的SSID一样，是否会有什么影响？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;不需要用户选择具体网络（也无法手工选择），而是终端的网卡选择&lt;/li&gt;
  &lt;li&gt;首次连接的时候，依靠终端自己的行为来决定是连2.4G还是5G。
    &lt;ul&gt;
      &lt;li&gt;有的支持双频的设备首次连接2.4G后，永不连接5G&lt;/li&gt;
      &lt;li&gt;有的支持5G就连了5G，但是即使之后信号变差（5G衰减快），也不会切换&lt;/li&gt;
      &lt;li&gt;IOS默认优先5G，无法连接时才会连接2.4G&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;路由器wan口-ip和lan口-ip&quot;&gt;路由器wan口 ip和lan口 ip？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;wan口ip：就是运营商/上级网络给的ip&lt;/li&gt;
  &lt;li&gt;lan口ip：就是此路由器在自己分配的子网中的ip&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;华为手机自动切换wi-fi为什么&quot;&gt;华为手机自动切换Wi-Fi，为什么？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;（自己的理解）&lt;/strong&gt;可能是检测到一个信号弱，就接入了信号强的那个&lt;/p&gt;

&lt;h3 id=&quot;路由器是什么东西到底在网络的哪一层&quot;&gt;路由器是什么东西，到底在网络的哪一层？&lt;/h3&gt;

&lt;h3 id=&quot;natnetwork-address-translation&quot;&gt;NAT（Network Address Translation）：&lt;/h3&gt;
&lt;p&gt;网络地址转换，NAT能将其本地地址转换成全球IP地址（内网要想和外部Internet链接就需要转换成公网唯一IP与外部链接，需要使用路由NAT转换）。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;静态转换：将内部网络的私有IP地址转换为公有IP地址，IP地址对是一对一。&lt;/li&gt;
  &lt;li&gt;动态转换是指将内部网络的私有IP地址转换为公用IP地址时，IP地址是不确定的，是随机的。&lt;/li&gt;
  &lt;li&gt;端口多路复用（Port address Translation,PAT)，内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时又可隐藏网络内部的所有主机，有效避免来自internet的攻击。因此，目前网络中应用最多的就是端口多路复用方式。&lt;/li&gt;
  &lt;li&gt;应用程序级网关技术（Application Level Gateway）ALG：传统的NAT技术只对IP层和传输层头部进行转换处理，ALG它能对这些应用程序在通信时所包含的地址信息也进行相应的NAT转换。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;代理&quot;&gt;代理：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;正向代理：隐藏真实的请求客户端。eg. 翻墙服务器&lt;/li&gt;
  &lt;li&gt;反向代理：隐藏真实的请求服务端。eg. nginx做load balance server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ddns&quot;&gt;DDNS：&lt;/h3&gt;
&lt;p&gt;动态域名解析，是将用户的动态IP地址映射到一个固定的域名解析服务上。DDNS捕获用户每次变化的IP地址，然后将其与域名相对应，这样域名就可以始终解析到非固定IP的服务器上，互联网用户通过本地的域名服务器获得网站域名的IP地址，从而可以访问网站的服务。&lt;/p&gt;

&lt;h3 id=&quot;网络信号不强的解决方案&quot;&gt;网络信号不强的解决方案：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;直接WAN-LAN接法通过网线/无线，用新的路由器扩展。SSID和密码如果设置成一样那就可以不用手动转换。&lt;/li&gt;
  &lt;li&gt;使用具有wds功能的无线AP桥接到出口路由器&lt;/li&gt;
  &lt;li&gt;改架构：出口路由器 - PoE交换机（统一为面板AP提供弱电） - AC无线控制器（统一下发配置），面板式AP（无线有线电源都集成在内）&lt;/li&gt;
  &lt;li&gt;网线也有超五类（CAT5e）、六类（CAT6）等的区别，传输能力不同（100M，1000M，…）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;总结和解决方案&quot;&gt;总结和解决方案：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;现有结构是，主路由，下接子路由，均有DHCP功能，2个网段&lt;/li&gt;
  &lt;li&gt;设置成桥接（子路由不做DHCP，且LAN口ip不与主路由重复），Wi-Fi的SSID和密码和主路由设置成一样的&lt;/li&gt;
  &lt;li&gt;内网服务器参见上文，&lt;a href=&quot;/blog/infrastructure/2019/10/20/rasepberry-pi-server-set-up.html&quot;&gt;树莓派从零开始设置记录&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;关于暴露端口，因为运营商给的也是内网地址不知道会不会出问题，路由器太低端功能也不够，考虑到没什么安全知识，作罢&lt;/li&gt;
  &lt;li&gt;关于内网域名访问，需要自建DNS服务器，并且修改需要使用的机器的DNS服务器（或者直接修改路由器的）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/30584853&quot;&gt;路由器wan口和lan口连接在一起 是什么机制和原理？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://service.tp-link.com.cn/detail_article_3241.html&quot;&gt;如何修改路由器LAN口IP地址？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://service.tp-link.com.cn/detail_article_1059.html&quot;&gt;[WDS桥接功能] 如何扩展无线网络？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://service.tp-link.com.cn/detail_article_572.html&quot;&gt;三类常见上网方式介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/redeg/article/details/3017321&quot;&gt;TP-LINK路由器两种不同的级联方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20738115&quot;&gt;LAN口和WAN口的区别是什么？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://product.pconline.com.cn/itbk/wlbg/network/1802/10851495.html&quot;&gt;多个路由器级联怎么设置 路由器串接级联接线设置【详解】&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://service.tp-link.com.cn/detail_article_89.html&quot;&gt;多台路由器如何串联（级联）？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Dallin0408/article/details/60961148&quot;&gt;通信网络中的透传到底什么意思？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/26477444&quot;&gt;双频ac的路由器2.4G和5G的SSID能不能一样?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ask.csdn.net/questions/259502&quot;&gt;救命啊，大神！！用markdown写的文档，使用jekyll生成博客，然而表格不能在博客正常显示？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27482090&quot;&gt;小户型家庭网络设计案例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24387774&quot;&gt;家庭网络系统规划及布线指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/a501d80c0eb7b8ec630f5ea8.html&quot;&gt;怎样使用LLTD链路层发现协议查看网络拓扑图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zhangguo5/article/details/77848658&quot;&gt;一分钟实现内网穿透（ngrok服务器搭建）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/a1ab0b30f42b&quot;&gt;教你读懂Linux路由表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=v_wz0zQngnA&quot;&gt;Making use of OLD ROUTER as Wifi REPEATER | SWITCH | Wifi EXTENDER&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%90%8C%E4%B8%80%E7%BD%91%E6%AE%B5&quot;&gt;同一网段&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/27714563&quot;&gt;什么是外网IP和内网IP?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Qiuzhongweiwei/article/details/80172270&quot;&gt;子网掩码,如255.255.255.0\24， 24代表什么?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhidao.baidu.com/question/143815669.html&quot;&gt;192.168.0.1/24怎么算子网掩码？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/22642189&quot;&gt;怎么扩展无线路由器信号？（书房路由器覆盖不到卧室）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20380724&quot;&gt;无线网络的中继和桥接有什么区别？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/48691846&quot;&gt;子网掩码为255.255.255.255是什么情况？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/santtde/article/details/86765506&quot;&gt;路由器工作原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/MyySophia/article/details/78869731&quot;&gt;网关和默认路由0.0.0.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.52itstyle.vip/archives/2782/&quot;&gt;公司内网搭建代理DNS使用内网域名代替ip地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 25 Oct 2019 20:47:00 -0700</pubDate>
				<link>http://localhost:4000/blog/network/2019/10/25/home-network-system-related.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/network/2019/10/25/home-network-system-related.html</guid>
			</item>
		
			<item>
				<title>树莓派从零开始设置记录</title>
				<description>&lt;h3 id=&quot;已有知识&quot;&gt;已有知识：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;学过中学物理（电流电路……）&lt;/li&gt;
  &lt;li&gt;玩过51单片机（只会用C点亮LED灯）&lt;/li&gt;
  &lt;li&gt;会C，Python和Bash&lt;/li&gt;
  &lt;li&gt;了解了一点SSH&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;过程&quot;&gt;过程：&lt;/h3&gt;
&lt;p&gt;在查资料的过程中，大概理解了，树莓派就是一个性能尚可的带了很多接口的ARM构架的微型主机。server，只是一个能发挥其部分作用的应用方向。好像更多的是当作智能硬件来用？&lt;/p&gt;

&lt;p&gt;那么首先，需要操作系统：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;官网&lt;/a&gt;下载基于Debian的Linux操作系统&lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot;&gt;Raspbian&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;尝试下载zip，但是速度太慢 -&amp;gt; 试着下载种子 -&amp;gt; 发现没有种子下载器 -&amp;gt; do research，Mac上多人推荐Folx -&amp;gt; 下载Folx本身速度很慢 -&amp;gt; 算了，直接从官网下载最精简版Raspbian Buster Lite的zip。&lt;/li&gt;
      &lt;li&gt;检查checksum，官网给出的是SHA-256:a50237c2f718bd8d806b96df5b9d2174ce8b789eda1f03434ed2213bbca6c6ff，在终端运行指令:
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shasum &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 256 2019-09-26-raspbian-buster-lite.zip&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%% *&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a50237c2f718bd8d806b96df5b9d2174ce8b789eda1f03434ed2213bbca6c6ff&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;0 	&lt;span class=&quot;c&quot;&gt;# %% return content of the variable with the longest occurrence of substring deleted from the back of the variable. ' *' matched ' 0orMoreChars'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;确定符合。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;烧录系统：
    &lt;ul&gt;
      &lt;li&gt;下载&lt;a href=&quot;https://www.balena.io/etcher/&quot;&gt;balenaEtcher&lt;/a&gt;（Windows上好像是用Win32DiskImager比较多）&lt;/li&gt;
      &lt;li&gt;解压zip文件，得到img镜像&lt;/li&gt;
      &lt;li&gt;micro SD卡转接插入电脑，选择，烧录
        &lt;ul&gt;
          &lt;li&gt;最后烧录成2个分区，FAT32的root分区（内核），以及EXT4分区（操作系统）（Window上会显示磁盘没有格式化：系统不认识；Mac压根不会显示）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;此处，发现其实SD卡内本来烧录好了full的系统，但是我直接写了，并没有先格式化，不知道会对后续有何影响&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;检查系统烧录情况：
    &lt;ul&gt;
      &lt;li&gt;用micro HDMI连上支持HDMI口的显示屏&lt;/li&gt;
      &lt;li&gt;连接电源，树莓派自动开机（暂时不连其他外设，以免开机失败）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;确认系统正常工作&lt;/p&gt;

&lt;p&gt;至此，树莓派就变成了一台Linux主机。&lt;/p&gt;

&lt;p&gt;因为还买了外壳，所以接下来装外壳：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;壳组转本身按照模糊的视频教程，以及商品照片来就可以，参考每个板的凸凹，以及合适程度确认&lt;/li&gt;
  &lt;li&gt;附带了散热片
    &lt;ul&gt;
      &lt;li&gt;按照大小，分别装在CPU（风扇下方，方形的），内存芯片（中间，最长的），USB管理芯片（靠USB口，方的）上&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;附带了一个风扇，带红白线，到一个头上
    &lt;ul&gt;
      &lt;li&gt;风扇电源红线（接正极）那边接在离板中心近的5v power的GRIO口上（GRIO口横排在上，上排的左边数起第2个口。物理引脚BOARD编码：4），黑线那边（接负极）自然地卡在旁边的地线GND（GRIO口横排在上，上排的左边数起第3个口。物理引脚BOARD编码：6）上，形成5V电压（电势差）&lt;/li&gt;
      &lt;li&gt;风扇有logo的那边朝外，因为想从CPU抽热气（给的风扇logo面是凹，凸进凹出。可以想象凹的那面“舀”空气，把空气往外送/让空气变稀薄从而高压吹低压）（过后可以统计温度数据，最终决定装入风还是出风）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进行server所需的设置：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SSH设置：（自2016年9月开始，raspberry默认关闭ssh连接）
    &lt;ul&gt;
      &lt;li&gt;在micro SD卡的boot分区里新建一个名为“ssh”的空白文件&lt;/li&gt;
      &lt;li&gt;或者，在机器上执行命令&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo raspi-config&lt;/code&gt;后，选择5 Interfacing Options - P2 SSH&lt;/li&gt;
      &lt;li&gt;再或者，直接在机器上&lt;/li&gt;
      &lt;li&gt;验证可以正常登陆：
        &lt;ol&gt;
          &lt;li&gt;用树莓派连上路由器的一个LAN口，电脑连同一个路由器的另一个LAN口，保证在同一子网下。&lt;/li&gt;
          &lt;li&gt;从路由器设置页面得知树莓派ip，或者树莓派接上显示屏，&lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;，结合&lt;code class=&quot;highlighter-rouge&quot;&gt;networksetup -listallhardwareports&lt;/code&gt;确定ip（eth0代表有线网络，wlan0代表无线网络）&lt;/li&gt;
          &lt;li&gt;ssh pi@raspberry_pi_ip_address 看是否成功（密码：raspberry）&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;或者可以使用telnet，xrdp，VNC等方式&lt;/li&gt;
  &lt;li&gt;Windows可能没有预装SSH，可以用PuTTY(注意，默认设置是禁用小键盘，在Terminal - Features中修改)或者安装OpenSSH进行连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ok，已经验证可以SSH登陆了（&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh username@ip&lt;/code&gt;），接下来就是要真正接入网络了，为了顺便复习一下计算机网络，单独写在下一篇文章内。&lt;/p&gt;

&lt;p&gt;验证完过后，进行一些SSH有关的安全设置：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;添加SSH key（可以参照上一篇文章:&lt;a href=&quot;/blog/practice/2019/09/10/Gitlab-SSH-key.html&quot;&gt;GitLab设置SSH key，以及相关知识&lt;/a&gt;）&lt;!-- notice the link might change! --&gt;&lt;/li&gt;
  &lt;li&gt;可以改SSH的端口（默认22）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些基本设置：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;修改默认的密码：
    &lt;ul&gt;
      &lt;li&gt;root登陆，输入passwd，就可以修改&lt;/li&gt;
      &lt;li&gt;修改别的用户的，passwd xx（用户名），按照提示即可修改&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;安装vim：自带的vi很不方便（插入模式）
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install vim&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;固定ip的话，可以直连树莓派端进行设置(/etc/dhcpcd.conf文件中)，也可以在路由器处设置然后连接树莓派。此处，在路由器设置界面把Mac和ip绑定了，做了端口转发。&lt;/p&gt;

&lt;p&gt;使用Django快速建立项目进行测试：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Raspberry自带Python2.7和Python3.4&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find / -name pip*&lt;/code&gt; 尝试查找pip，发现没有&lt;/li&gt;
  &lt;li&gt;安装pip：尝试：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sh
  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  python get-pip.py
 &lt;/code&gt; 但是无法安装pip3&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install python3-pip&lt;/code&gt; 成功安装pip3&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install Django&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;为了让django-admin可以使用，还要加入环境变量：&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=$PATH:/home/pi/.local/bin&lt;/code&gt;。这是暂时的，当下生效；还需要在系统开机文件中添加这个语句，才能保证之后每次开机之后PATH变量都带这个directory：&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django-admin startproject mysite&lt;/code&gt; 创建项目&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py runserver&lt;/code&gt; 运行项目，默认端口8000&lt;/li&gt;
  &lt;li&gt;尝试从同一子网的机器直接access，发现不行，虽然ping和ssh都可以，猜测原因：服务器禁止访问
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim hello_world/settings.py
ALLOWED_HOSTS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'192.168.1.10'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;# add this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;还是不可以，猜测是主机防火墙（iptables）设置问题？使用ufw开启端口，注意也要开启22的ssh端口（未验证）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些问题：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;速度有点慢？
    &lt;ul&gt;
      &lt;li&gt;做research的时候，知道了是千兆网口，但是I/O比较弱，跟不上，因为是micro SD卡读写。SSD会快。&lt;/li&gt;
      &lt;li&gt;内存/硬盘不够？所以买大内存，大micro SD卡（32G以上好像需要reformat以及分区）&lt;/li&gt;
      &lt;li&gt;选择读写速度快，稳定的micro SD卡（最低class2，2MB/s；最高3，30MB/s。作为参考，SSD速度，是三位数……最高可以以G为单位）&lt;/li&gt;
      &lt;li&gt;换了4G内存，32G SD卡，依旧比较慢&lt;/li&gt;
      &lt;li&gt;继续research，比较其他server，发现延迟差不多，但是就是测速很慢&lt;/li&gt;
      &lt;li&gt;是在某个节点，推测线路是瓶颈？&lt;/li&gt;
      &lt;li&gt;ipip.net，工具TraceRoute或者tracet 查看路由以及延迟&lt;/li&gt;
      &lt;li&gt;ping.pe或者mtr查看各站丢包情况&lt;/li&gt;
      &lt;li&gt;国内网络情况复杂，不同的运营商之间慢，因为超售，国际慢（比如电信必须专用CN2线路才快，所以要找到的好的线路/机房）&lt;/li&gt;
      &lt;li&gt;BBR加速（谷歌的拥塞控制算法。Linux的4.9版内核已经使用该算法）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux上的一些命令的复习：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;grep (Global Regular Expression Print)：管道正则搜索。 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep 'test' d*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;wget：下载&lt;/li&gt;
  &lt;li&gt;scp：拷贝。eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;scp work@192.168.0.10:/home/work/source.txt work@192.168.0.11:/home/work/ 	#把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的/home/work目录下&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/huayucong/article/details/48107267&quot;&gt;树莓派的操作系统介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/hongweigg/article/details/77948664&quot;&gt;Linux shell 命令多行结果赋值给变量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/fetty/p/4857158.html&quot;&gt;Linux字符串截取命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.howtogeek.com/270333/what-does-the-percent-sign-in-linux-shell-strings-do/&quot;&gt;What Does the Percent Sign in Linux Shell Strings Do?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/shuai0845/article/details/86532142&quot;&gt;linux下的字符串比较&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jjlog.com/fenxiang/207.html&quot;&gt;如何识别HDMI、[mini]HDMI、[micro]HDMI接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.raspigeek.com/index.php?c=read&amp;amp;id=126&amp;amp;page=1&quot;&gt;树莓派散热片安装与风扇接线方法/ 和自动温控方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.basemu.com/raspberry-pi-4-gpio-pinout.html&quot;&gt;树莓派4的GPIO接口介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/coolwriter/article/details/75577092&quot;&gt;树莓派GPIO入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/vamei/p/6751992.html&quot;&gt;树莓派的GPIO编程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://product.pconline.com.cn/itbk/diy/power/1707/9645570.html&quot;&gt;机箱风扇方向 机箱风扇怎么安装最靠谱？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63818978&quot;&gt;谈一谈CPU散热与机箱风扇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53743408&quot;&gt;三秒钟区分电脑风扇进风端和出风端&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/kxwinxp/article/details/78370913&quot;&gt;树莓派3B+ 安装系统&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html&quot;&gt;无屏幕和键盘配置树莓派WiFi和SSH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shumeipai.nxez.com/2017/02/27/raspbian-ssh-connection-refused.html&quot;&gt;树莓派新系统SSH连接被拒绝的解决方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/huayucong/article/details/52966502&quot;&gt;使用Raspi-config配置工具来设置树莓派&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zdwzzu2006/article/details/6928803&quot;&gt;linux查看本机IP、gateway、dns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/m0_37556444/article/details/83351952&quot;&gt;mac的ifconfig命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/naibozhuan3744/article/details/84963024&quot;&gt;树莓派查看ip地址（命令ifconfig）和退出ping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/wuli_dear_wang/article/details/84446168&quot;&gt;树莓派远程连接的四种方式（最全）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u011630575/article/details/49821281&quot;&gt;修改linux用户密码（passwd）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6587507/how-to-install-pip-with-python-3&quot;&gt;How to install pip with Python 3?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opensource.com/article/17/6/set-path-linux&quot;&gt;How to set your $PATH variable in Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Calvin_zhuyue/article/details/67677491&quot;&gt;树莓派搭建django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wsgzao.github.io/post/iptables/&quot;&gt;iptables 配置实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/haochuang/p/6214534.html&quot;&gt;【树莓派】配置树莓派防火墙&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.2/intro/tutorial01/&quot;&gt;Writing your first Django app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/nex3/c395b2f8fd4b02068be37c961301caa7&quot;&gt;path.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/end/archive/2012/02/21/2360965.html&quot;&gt;linux grep命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_31010431/article/details/54285664&quot;&gt;SSH远程拷贝文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/59df0009316e&quot;&gt;树莓派3b+从0开始：（2）SD卡的配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/QianZhaoVic/article/details/79031359&quot;&gt;从Linux服务器下载文件夹到本地&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u013178472/article/details/78574878&quot;&gt;树莓派手动指定静态IP和DNS 终极解决大法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.itabas.com/2016/09/08/raspberry/access-raspberry/&quot;&gt;外网访问树莓派&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/lqxandroid2012/article/details/79696318&quot;&gt;用ping ，mtr ，traceroute 进行网络丢包分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28580807&quot;&gt;Micro SD 卡你真的会选么？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/xxNull/article/details/78280581&quot;&gt;树莓派之SSH连接经验&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/raspberry-pi/software.html&quot;&gt;树莓派常用软件及服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://einverne.github.io/post/2017/11/mtr-usage.html&quot;&gt;每天学习一个命令: mtr 查看路由网络连通性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/lynxzong/article/details/89810538&quot;&gt;树莓派如何开启谷歌的BBR TCP加速&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.liuboping.com/%E5%BC%80%E5%90%AFtcp-bbr%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95/&quot;&gt;开启TCP BBR拥塞控制算法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fangeqiang.com/1378.html&quot;&gt;[科普] 为什么你用的VPN网速那么慢？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/farYang/article/details/50788795&quot;&gt;树莓派安装mysql并开启远程访问(开启3306端口)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/lamp_yang_3533/article/details/52154695&quot;&gt;同一局域网内的其他电脑访问我的电脑本地的网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sun, 20 Oct 2019 19:33:00 -0700</pubDate>
				<link>http://localhost:4000/blog/infrastructure/2019/10/20/rasepberry-pi-server-set-up.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/infrastructure/2019/10/20/rasepberry-pi-server-set-up.html</guid>
			</item>
		
			<item>
				<title>Java线程安全之可见性和原子性</title>
				<description>&lt;p&gt;&lt;strong&gt;Java线程安全&lt;/strong&gt;问题，是我们在写多线程程序的时候需要考虑的。&lt;/p&gt;

&lt;p&gt;具体一点来说，是当且仅当多线程有&lt;strong&gt;共享的变量&lt;/strong&gt;的时候（堆内存中。堆内存：放实例字段，静态字段和数组元素。共享变量：非局部变量——比如在线程执行方法中的变量；也不是ThreadLocal声明的变量。每个线程有自己的工作内存，主要用于完成代码操作，有虚拟机栈——Java方法，本地方法栈——Native方法，程序计数器——记录当前线程执行字节码的位置。所有线程共享堆内存和方法区）。&lt;/p&gt;

&lt;p&gt;再具体一点，是有线程写变量，同时也有线程读或者写共享变量的时候：显而易见地，如果所有线程都只是读共享变量，并不会产生什么冲突。&lt;/p&gt;

&lt;h3 id=&quot;可见性&quot;&gt;可见性&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;可见性&lt;/strong&gt;，扩句：一个写线程的修改对其他读线程的可见。&lt;/p&gt;

&lt;p&gt;比如说，&lt;strong&gt;脏读&lt;/strong&gt;，是没有满足可见性的情况。举例：t1将共享变量v的值从0修改成1，但是t2读的时候，读到的还是0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;造成脏读的原因&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CPU的缓存机制：正常数据都存在主内存（main memory），但是读写都比较慢，所以CPU做了一点优化：在CPU内使用cache，缓存部分数据。 从多线程的角度上来说，就是，每个线程可能有自己的cache，并且，不一定什么时候更新到主内存的值。对于写和读都是如此，我们无法决定CPU什么时候把值从缓存写到主内存，或者从主内存读到缓存，所以就有了滞后性，可能造成脏读。&lt;/li&gt;
  &lt;li&gt;指令重排：缓存机制造成的脏读，只是一时性的。但是指令重排（as-if-serial，重新排列指令，在单个线程结果不会改变的条件上，所以，在多线程的情况下，这种顺序改变，可能造成使用的是其他线程修改之前的值），可能造成永久性的脏读。CPU会做这种指令重排；Java编译器也会做：JIT (Just In Time)编译。Java程序的运行过程是，先被Java编译器编译成字节码文件（这里没有任何性能优化），然后被JVM解释运行，一行行的。从这个角度上来说，Java是脚本语言。但是！这样很耗时间，比如在循环之中，JIT编译器就会编译重复解释的语句以提高性能：编译完后放在方法区，下次跑的时候就不解释了，直接去拿。从这个角度上来说，Java是编译语言。总而言之，Java是两者的结合，并且，在JIT升级编译的过程中，JVM会进行上述可能产生问题的指令重排&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Java制定的规范&lt;/strong&gt;：Java内存模型（描述多线程程序的语义）规定了volatile关键字，需要实现：对被此关键字修饰的变量的写操作，需要对之后所有的读操作同步。这样，用volatile关键字修饰的变量，就不会产生脏读问题了：所有的读，读到的都一定是更新的写之后的数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JVM的实现方法&lt;/strong&gt;：禁止CPU缓存；对volatile变量相关的指令不做指令重排（反过来说，也就是：只有指令重排影响到可见性的时候，才会禁止）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他的例子&lt;/strong&gt;：读写操作扩展开来，就是：一个程序执行的操作可被其他线程感知或被其他线程直接影响。具体的例子有：Lock, Unlock；db数据修改，等等。对于所有的线程间操作，都存在可见性问题，JMM都作了规范。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重申&lt;/strong&gt;：脏读，即是想定了，只有一个线程写，其他都是读的情况。如果有多个线程写？详见下文。&lt;/p&gt;

&lt;h3 id=&quot;原子性&quot;&gt;原子性&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;，意即一个操作的不可分割性——如果分割了，可能会产生失效。&lt;/p&gt;

&lt;p&gt;比如说，&lt;strong&gt;脏写&lt;/strong&gt;。举例：t1和t2一起读了v的值：1，然后t1进行+1操作，把v的值从1变成了2，写回；t2同理，也想进行+1操作，于是把v的值从1变成了2，也写回了。这样，我们第一次的写操作就丢失了。或者说，从t1写回了的那个时间点开始，t2拿到的v的值实际上就已经失效/过期/不合法了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Naive的解决方法&lt;/strong&gt;：直接用synchronized保证一时间只有一个线程进行这个操作，或者用ReentrantLock在操作前后加锁、解锁，实现同样效果。但是这样的话，并发度只有1:一时间只有一个能操作。如何加速？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;聪明的解决办法&lt;/strong&gt;：有点像乐观锁的思想，就是总之先操作，然后看操作的合法性——写回的时候，如何看操作的合法性？记录变化前的旧值，和内存中的值进行比较；如果没有变化，才交换新值。这个比较和交换操作（CAS）是一个从硬件层面上保证的原子操作，所以保证了不会在这期间有冲突。如果有变化的话，则从头开始任务。如此不断循环，直到成功（自旋）。实际上，AtomicInteger的，比如incrementAndGet方法就是这么做的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一些随之产生的问题&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;不断循环，消耗CPU（实际上碰撞的几率不高；如果并发实在是大的话，就参照Map/Reduce的思想，多创建几个可操作的对象，减少失败率，最后sum up）；&lt;/li&gt;
  &lt;li&gt;CAS是仅针对单个变量的原子操作（虽然可以通过创建对象的方式规避）；&lt;/li&gt;
  &lt;li&gt;ABA问题：我们只比较了旧值，如果有操作多次修改而值没有改变？那我们的目标：保持共享变量的合法性，就还是没有达到（可以通过增加修改版本号的方式解决）。&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sat, 12 Oct 2019 18:43:43 -0700</pubDate>
				<link>http://localhost:4000/blog/high-performance/2019/10/12/java-thred-safe-visibility-atomicity.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/high-performance/2019/10/12/java-thred-safe-visibility-atomicity.html</guid>
			</item>
		
			<item>
				<title>GitLab设置SSH key，以及相关知识</title>
				<description>&lt;h3 id=&quot;gitlab设置ssh-key在本地已有ssh-key的情况下&quot;&gt;GitLab设置SSH key（在本地已有SSH key的情况下）&lt;/h3&gt;
&lt;p&gt;环境：macOS 10.14.6
（因为是Mac，所以预装了OpenSSH client。Windows得先装这个再进行以下操作）&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;生成SSH key：
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;注册用的email, ...&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;ed25519这个数字签名算法是最安全，performance最好的（验证、签名、key生成的速度都快，签名公钥都很小）。如果server支持就用尽量这个。&lt;/li&gt;
      &lt;li&gt;默认且最常用的是RSA。推荐加上-b 4096参数生成4096 bits的key；旧的RSA不安全（仅一轮MD5 hash），推荐在6.5版本之后，加上-o用新方法encode。
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ssh-keygen &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;注册用的email, ...&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;-C 参数是comment，可不写。可以是本机信息，因为注释会包含在最后的公钥中。&lt;/li&gt;
      &lt;li&gt;-f 参数指定file name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在被保存SSH key的file的时候，不要用之前GitHub重复的文件（或者说，任何已有的SSH key的文件，否则之前的就会被覆盖 or 退出）。
    &lt;ul&gt;
      &lt;li&gt;默认名字是id_签名算法。如果之前是一路enter，那么就是id_rsa&lt;/li&gt;
      &lt;li&gt;最好保持路径一样：在默认文件夹：~/.ssh下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在被问password（passphrase）的时候，为了安全，可以使用。这是为了在本机硬盘上保护私钥。&lt;/li&gt;
  &lt;li&gt;后台启动ssh-agent，将 SSH 私钥添加到 ssh-agent 并将密码存储在密钥链中：
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
 ssh-add ~/.ssh/new_ssh_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;如果没有设置passphrase，可以省略这一步；如果有passphrase而省略这一步，每次连接都会询问passphrase。&lt;/li&gt;
      &lt;li&gt;ssh-agent创建socket，等待SSH connections。用户只需输入一次passphrase，之后ssh-agent会处理一切。&lt;/li&gt;
      &lt;li&gt;如果需要删除，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add -D ~/.ssh/new_ssh_key&lt;/code&gt;，只对手动加入的有效&lt;/li&gt;
      &lt;li&gt;如果不指定文件，就是加入默认文件夹：.ssh下的所有available keys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;创建/修改配置文件，保证本机能够根据host选择对应的私钥：
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; vim ~/.ssh/config
 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# GitHub&lt;/span&gt;
 Host github.com
   Preferredauthentications publickey
   IdentityFile ~/.ssh/id_rsa

 &lt;span class=&quot;c&quot;&gt;# Private GitLab instance&lt;/span&gt;
 Host gitlab.company.com
   Preferredauthentications publickey
   IdentityFile ~/.ssh/new_ssh_key
 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;esc + : + wq&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;如果之前有使用密码保护私钥，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;UseKeychain yes&lt;/code&gt;将passphrases都存在Keychain中&lt;/li&gt;
      &lt;li&gt;如果是macOS Sierra 10.12.2及以上版本的，可以直接指定&lt;code class=&quot;highlighter-rouge&quot;&gt;AddKeysToAgent yes&lt;/code&gt;从而省略上一步（ssh-agent）的手动配置&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;复制公钥到剪切板：
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pbcopy &amp;lt; ~/.ssh/new_ssh_key.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;如果手动copy，要注意copy所有内容：以ssh-ed25519 / ssh-rsa开始，以使用的email结尾。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;添加公钥到远程服务器：
    &lt;ul&gt;
      &lt;li&gt;大概有可以用的图形界面（GitLab: setting - SSH Keys - Key）&lt;/li&gt;
      &lt;li&gt;如果生成的时候用了-C，那么注释会出现在Title下。如果没有？写个好辨认的title，比如，home，或者Work Laptop。&lt;/li&gt;
      &lt;li&gt;如果没有，需要手动添加，则：
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh-copy-id &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; identity_file username@remote_host
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;需要输入远程用户登陆密码&lt;/li&gt;
          &lt;li&gt;命令完成后，公钥就会被放到remote account的~/.ssh文件夹下，名为authorized_keys&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;如果没有，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;cat ~/.ssh/id_rsa.pub | ssh username@remote_host &quot;mkdir -p ~/.ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&quot;&lt;/code&gt;替代（显示，管道，如果不存在则创建文件夹，加在文件最后）&lt;/li&gt;
      &lt;li&gt;或者可以手动复制：
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub
 &lt;span class=&quot;c&quot;&gt;# log in to remote server&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/.ssh
 &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;public_key_string &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;完了之后，为了安全，可以设置文件夹为仅当前用户读写执行，文件为仅当前用户读写：
        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 ~/.ssh/authorized_keys
 &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;700 ~/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;验证一下之前的SSH key没有被破坏（此处是GitHub），以及新的SSH key是否添加成功
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@github.com
 ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@gitlab.company.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;可以加参数-v看到详细验证过程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;相关背景知识&quot;&gt;相关背景知识&lt;/h3&gt;
&lt;h4 id=&quot;ssh&quot;&gt;SSH&lt;/h4&gt;
&lt;p&gt;用于加密登陆的网络协议（即使被截获，内容也不会泄露），有多种实现。主要用于远程登录（safely administering remote servers）。在2个party间建立安全的连接，互相验证，传递commands和output。&lt;/p&gt;

&lt;h4 id=&quot;ssh工作流程&quot;&gt;SSH工作流程：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;建立安全信道：此处使用对称加密（双方共享一个key，用于加密和解密；或者一堆关系简单可以推导的key）。
    &lt;ul&gt;
      &lt;li&gt;无论用那种验证方法，都要先建立安全信道&lt;/li&gt;
      &lt;li&gt;这个key是sesson-base，用于保证之后所有的传输的安全&lt;/li&gt;
      &lt;li&gt;可以设置使用不同的symmetrical cipher systems：client有个preference list，最后双方共同选择的是，client的list上尽量靠前的，server也支持的。&lt;/li&gt;
      &lt;li&gt;大概过程是：
        &lt;ol&gt;
          &lt;li&gt;双方共享一个大质数；&lt;/li&gt;
          &lt;li&gt;双方约定encryption generator (eg. AES)；&lt;/li&gt;
          &lt;li&gt;双方各自决定一个秘密的质数，当作私钥；&lt;/li&gt;
          &lt;li&gt;使用这个私钥，还有约定好的相同的encryption generator，和共享的大质数生成公钥。这个公钥可以随意公开，并且公钥无法推导出对应的私钥；&lt;/li&gt;
          &lt;li&gt;双方交换公钥；&lt;/li&gt;
          &lt;li&gt;各方有自己的私钥和对方的公钥，以及一开始共享的大质数，可以计算出一个shared secret key。双方各自计算，但是结果是一样的。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;最后得到的共同的secret key就是上面所说的sesson-based key，用于双方加密解密接下来的通信&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;验证用户：使用非对称加密（单方向发送数据需要一对associated key：公钥可以随意分享，用于加密；私钥用于解密对应公钥加密的内容。）
    &lt;ul&gt;
      &lt;li&gt;用户名密码：传统方法，像普通的计算机登陆。密码被加密后传送，但是长度有限，可以暴力破解。&lt;/li&gt;
      &lt;li&gt;SSH key：更安全。
        &lt;ul&gt;
          &lt;li&gt;client生成一对key pair。&lt;/li&gt;
          &lt;li&gt;server存公钥（加密），client都有（私钥解密）。&lt;/li&gt;
          &lt;li&gt;server通过验证client有对应私钥验证client身份。&lt;/li&gt;
          &lt;li&gt;client通过第一次连接的时候获取的fingerprint人工手工验证server，只要这个fingerprint不变化，就不会再bother到人（或者在config文件中设置StrickHostKeyChecking no，自动把新的host加入known_hosts，否则第一次连接的时候会询问；UserKnownHostsFile /dev/null，不警告新的或者fingerprint变化的host。）&lt;/li&gt;
          &lt;li&gt;具体验证过程：
            &lt;ol&gt;
              &lt;li&gt;client发送自己的key pair的ID给server；&lt;/li&gt;
              &lt;li&gt;server在对应用户目录下的~/.authorized_keys中查找到对应的公钥；&lt;/li&gt;
              &lt;li&gt;如果found，server生成随机数字，用公钥加密；&lt;/li&gt;
              &lt;li&gt;server发送这个加密后的信息（当然，要使用先前建立好的安全信道，所以还有一道加密。不过这个相当于当前layer下的一层了，可以当作透明，不考虑）；&lt;/li&gt;
              &lt;li&gt;client如果有对应的私钥，就可以成功解密，得到original number；&lt;/li&gt;
              &lt;li&gt;client结合解密后的数字，以及shared session key，计算出MD5值；&lt;/li&gt;
              &lt;li&gt;client发送这个MD5值到server，作为答案；&lt;/li&gt;
              &lt;li&gt;server一样使用shared session key，和自己有的original number计算MD5值。如果一样，则认为client有provate key，验证成功。&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，还会使用hash保证data integrity。&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xuyuan923.github.io/2014/11/04/github-gitlab-ssh/&quot;&gt;github/gitlab同时管理多个ssh key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/b9f686dfbdb2&quot;&gt;github和gitlab公用，ssh key 配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/cn/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&quot;&gt;生成新 SSH 密钥并添加到 ssh-agent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitlab.com/help/ssh/README#types-of-ssh-keys-and-which-to-choose&quot;&gt;GitLab and SSH keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process&quot;&gt;Understanding the SSH Encryption and Connection Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server&quot;&gt;How To Configure SSH Key-Based Authentication on a Linux Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html&quot;&gt;SSH原理与运用（一）：远程登录&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/gavincoder/p/10054532.html&quot;&gt;Git连接GitLab远程仓库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys&quot;&gt;SSH Essentials: Working with SSH Servers, Clients, and Keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_40870418/article/details/78829769&quot;&gt;Diffie-Hellman密钥是如何交换的&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/72552/whats-the-purpose-of-ssh-agent&quot;&gt;what’s the purpose of ssh-agent?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25464930/how-to-remove-an-ssh-key&quot;&gt;How to remove an ssh key?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54&quot;&gt;Upgrade Your SSH Key to Ed25519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 10 Sep 2019 10:42:00 -0700</pubDate>
				<link>http://localhost:4000/blog/practice/2019/09/10/Gitlab-SSH-key.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/practice/2019/09/10/Gitlab-SSH-key.html</guid>
			</item>
		
			<item>
				<title>【转】JWT（JSON Web Token）</title>
				<description>&lt;h3 id=&quot;摘抄自&quot;&gt;摘抄自：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&quot;&gt;JSON Web Token 入门教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户认证：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;用户向服务器发送用户名和密码。&lt;/li&gt;
  &lt;li&gt;服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;/li&gt;
  &lt;li&gt;服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;/li&gt;
  &lt;li&gt;用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。&lt;/li&gt;
  &lt;li&gt;服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/li&gt;
  &lt;li&gt;扩展性不好：scaling。单机ok，但是如果是服务器集群 or 跨域的服务导向构架，要求session数据共享。eg. 2个网站，同一家公司，需要一个网站登录，另一个就自动登录。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;session数据持久化：写入数据库或别的持久层。服务器收到请求后，都像持久层请求数据。架构清晰，但是持久层挂了就惨了。&lt;/li&gt;
  &lt;li&gt;服务器不保存，所有数据都保存在客户端，每次请求都发回服务器。eg. JWT。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;原理：服务器认证后，生成JSON对象，包括到期时间。每次C与S通信时，都要发回这个JSON对象。防止篡改，服务器会加上签名。 -&amp;gt; 无服务无状态了，容易实现扩展。&lt;/p&gt;

&lt;p&gt;JWT数据结构：很长的字符串，中间用点（.）分隔成三个部分。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Header（头部）·Payload（负载）·Signature（签名）&lt;/li&gt;
  &lt;li&gt;Header：元数据
    &lt;ul&gt;
      &lt;li&gt;{&lt;br /&gt;
  “alg”: “HS256”, // 签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）&lt;br /&gt;
  “typ”: “JWT” // 这个令牌（token）的类型（type），JWT 令牌统一写为JWT&lt;br /&gt;
  }&lt;/li&gt;
      &lt;li&gt;最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Payload：存放实际需要传递的数据。
    &lt;ul&gt;
      &lt;li&gt;官方规定字段：
        &lt;ul&gt;
          &lt;li&gt;iss (issuer)：签发人&lt;/li&gt;
          &lt;li&gt;exp (expiration time)：过期时间&lt;/li&gt;
          &lt;li&gt;sub (subject)：主题&lt;/li&gt;
          &lt;li&gt;aud (audience)：受众&lt;/li&gt;
          &lt;li&gt;nbf (Not Before)：生效时间&lt;/li&gt;
          &lt;li&gt;iat (Issued At)：签发时间&lt;/li&gt;
          &lt;li&gt;jti (JWT ID)：编号&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;也可以定义私有字段&lt;/li&gt;
      &lt;li&gt;也用BaseURL转成字符串
！默认不加密，所以不要放秘密信息！&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;signature：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;对前两部分的签名，防止数据篡改。&lt;/li&gt;
  &lt;li&gt;服务器才知道的密钥（secret），使用Header里面指定的签名算法（默认是HMAC SHA256）算出：&lt;/li&gt;
  &lt;li&gt;HMACSHA256(&lt;br /&gt;
	base64UrlEncode(header) + “.” +&lt;br /&gt;
	base64UrlEncode(payload),&lt;br /&gt;
	secret)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Base64URL算法：和Base64基本类似。JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 &lt;a href=&quot;http://api.example.com/?token=xxx&quot;&gt;api.example.com/?token=xxx&lt;/a&gt;）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。&lt;/p&gt;

&lt;p&gt;JWT使用方式：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;客户端收到服务器返回的JWT，可以储存在Cookie里面，也可以储存在localStorage。此后每次通信，都要带上这个。可以放在cookie里面自动发送，但是不能跨域。所以更好的做法：HTTP请求的头信息Authorization字段里面：
    &lt;ul&gt;
      &lt;li&gt;Authorization: Bearer &lt;token&gt;&lt;/token&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;或者，跨域的时候放在POST请求的数据体里&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。&lt;/li&gt;
  &lt;li&gt;JWT 不加密的情况下，不能将秘密数据写入 JWT。&lt;/li&gt;
  &lt;li&gt;JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。&lt;/li&gt;
  &lt;li&gt;JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。&lt;/li&gt;
  &lt;li&gt;JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。&lt;/li&gt;
  &lt;li&gt;为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。
*JWT还是用在一些不那么需要保证安全的地方会好一些例如确认退订邮件等。&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 04 Sep 2019 12:00:00 -0700</pubDate>
				<link>http://localhost:4000/blog/security/2019/09/04/JWT.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/security/2019/09/04/JWT.html</guid>
			</item>
		
			<item>
				<title>Hello, world!</title>
				<description>&lt;h1 id=&quot;some-heading&quot;&gt;some heading&lt;/h1&gt;

&lt;p&gt;This is my first post.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://medium.com/@satorusasozaki/how-to-create-a-blog-with-jekyll-and-github-page-d6470ab32369&quot;&gt;How to Create a Blog with Jekyll and GitHub Page&lt;/a&gt;, &lt;a href=&quot;https://medium.com/20percentwork/creating-your-blog-for-free-using-jekyll-github-pages-dba37272730a&quot;&gt;Greating your blog for free using Jekyll + Github pages&lt;/a&gt;, &lt;a href=&quot;https://jekyllcn.com&quot;&gt;Jeckll&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/43622325/failed-to-load-resources-with-jekyll-on-a-github-page&quot;&gt;Failed to load resources with Jekyll on a Github page&lt;/a&gt;, &lt;a href=&quot;https://24ways.org/2013/get-started-with-github-pages/&quot;&gt;Get Started With GitHub Pages (Plus Bonus Jekyll)&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages&quot;&gt;Configuring a publishing source for GitHub Pages&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Mon, 19 Aug 2019 00:27:00 -0700</pubDate>
				<link>http://localhost:4000/blog/other/2019/08/19/hello-world.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/other/2019/08/19/hello-world.html</guid>
			</item>
		
			<item>
				<title>【转】CDN内容分发网络</title>
				<description>&lt;h3 id=&quot;摘抄自&quot;&gt;摘抄自：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/YqZ14FfXZjfWln2Ye9dS5A&quot;&gt;学习什么是CDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类比快递的多个仓库，智能仓配。解决因分布、宽带、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。用户可以就近取得所需内容。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;首先通过预先做好了货物分发，使得最终货品从出仓到消费者手中的过程是比较短的，那么同城范围内可选择的配送公司就有很多选择，除了比较大的四通一达、顺丰以外，还可以选用一些小的物流公司、甚至菜鸟直接调用饿了么的蜂鸟配送也不是不可能。&lt;br /&gt;
-&amp;gt; CDN技术消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量&lt;/li&gt;
  &lt;li&gt;对于仓配系统来说，最大的灾难可能就是仓库发生火灾、水灾等自然灾害。如果把原来的一个集中式的大仓库打散成多个分布式的小仓库，分别部署在不同地区，就可以有效的减小自然灾害带来的影响。&lt;br /&gt;
-&amp;gt; 广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种DDoS攻击对网站的影响，同时保证较好的服务质量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;传统的响应过程：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;用户在自己的浏览器中输入要访问的网站域名。&lt;/li&gt;
  &lt;li&gt;浏览器向本地DNS服务器请求对该域名的解析。&lt;/li&gt;
  &lt;li&gt;本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。&lt;/li&gt;
  &lt;li&gt;本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以迭代方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。&lt;/li&gt;
  &lt;li&gt;浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址 。&lt;/li&gt;
  &lt;li&gt;浏览器获取IP地址之后，经过标准的TCP握手流程，建立TCP连接。&lt;/li&gt;
  &lt;li&gt;浏览器向服务器发起HTTP请求。&lt;/li&gt;
  &lt;li&gt;服务器将用户请求内容传送给浏览器。&lt;/li&gt;
  &lt;li&gt;经过标准的TCP挥手流程，断开TCP连接。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引入了CDN之后的响应过程：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;当用户点击网站页面上的内容URL，先经过本地DNS系统解析，如果本地DNS服务器没有相应域名的缓存，则本地DNS系统会将域名的解析权交给CNAME指向的CDN专用DNS服务器。&lt;/li&gt;
  &lt;li&gt;CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回给用户。&lt;/li&gt;
  &lt;li&gt;用户向CDN的全局负载均衡设备发起URL访问请求。&lt;/li&gt;
  &lt;li&gt;CDN全局负载均衡设备根据用户IP地址，以及用户请求的URL，选择一台用户所属区域的区域负载均衡设备，并将请求转发到此设备上。&lt;/li&gt;
  &lt;li&gt;基于以下这些条件的综合分析之后，区域负载均衡设备会选择一个最优的缓存服务器节点，并从缓存服务器节点处得到缓存服务器的IP地址，最终将得到的IP地址返回给全局负载均衡设备：
    &lt;ul&gt;
      &lt;li&gt;根据用户IP地址，判断哪一个边缘节点距用户最近；&lt;/li&gt;
      &lt;li&gt;根据用户所请求的URL中携带的内容名称，判断哪一个边缘节点上有用户所需内容；&lt;/li&gt;
      &lt;li&gt;查询各个边缘节点当前的负载情况，判断哪一个边缘节点尚有服务能力。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;全局负载均衡设备把服务器的IP地址返回给用户。&lt;/li&gt;
  &lt;li&gt;用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总地来说，CDN全局负载均衡设备与CDN区域负载均衡设备根据用户IP地址，将域名解析成相应节点中缓存服务器的IP地址，实现用户就近访问，从而提高服务端响应内容的速度。&lt;/p&gt;

&lt;p&gt;中心节点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;包括CDN网管中心和全局负载均衡DNS重定向解析系统，负责整个CDN网络的分发及管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;边缘节点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CDN边缘节点主要指异地分发节点，由负载均衡设备、高速缓存服务器两部分组成。&lt;/li&gt;
  &lt;li&gt;负载均衡设备负责每个节点中各个Cache的负载均衡，保证节点的工作效率；同时还负责收集节点与周围环境的信息，保持与全局负载均衡DNS的通信，实现整个系统的负载均衡。&lt;/li&gt;
  &lt;li&gt;高速缓存服务器（Cache）负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。通过全局负载均衡DNS的控制，用户的请求被透明地指向离他最近的节点，节点中Cache服务器就像网站的原始服务器一样，响应终端用户的请求。因其距离用户更近，故其响应时间才更快。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结：中心节点就像仓配网络中负责货物调配的总仓，而边缘节点就是负责存储货物的各个城市的本地仓库。&lt;/p&gt;

&lt;p&gt;CDN中最重要的四大技术：内容发布、内容存储、内容路由以及内容管理等。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内容发布 （如何妥善的将货物分发到各个城市的本地仓）：借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处。&lt;/li&gt;
  &lt;li&gt;内容存储（如何妥善的各个本地仓存储货物）：对于CDN系统而言，需要考虑两个方面的内容存储问题。一个是内容源的存储，一个是内容在 Cache节点中的存储。&lt;/li&gt;
  &lt;li&gt;内容路由（如何根据用户的收货地址，智能的匹配出应该优先从哪个仓库发货，选用哪种物流方式等）：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程POP上均衡用户的请求，以使用户请求得到最近内容源的响应。&lt;/li&gt;
  &lt;li&gt;内容管理（对于整个仓配系统如何进行管理，如整体货物分发的精确度、仓配的时效性、发货地的匹配度等）：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Thu, 08 Aug 2019 12:00:00 -0700</pubDate>
				<link>http://localhost:4000/blog/high-performance/2019/08/08/CDN.html</link>
				<guid isPermaLink="true">http://localhost:4000/blog/high-performance/2019/08/08/CDN.html</guid>
			</item>
		
	</channel>
</rss>
